// Generated by gencpp from file my_package/my_message.msg
// DO NOT EDIT!


#ifndef MY_PACKAGE_MESSAGE_MY_MESSAGE_H
#define MY_PACKAGE_MESSAGE_MY_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_package
{
template <class ContainerAllocator>
struct my_message_
{
  typedef my_message_<ContainerAllocator> Type;

  my_message_()
    : x(0)
    , y(0)
    , z(0)  {
    }
  my_message_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , z(0)  {
  (void)_alloc;
    }



   typedef int16_t _x_type;
  _x_type x;

   typedef int16_t _y_type;
  _y_type y;

   typedef int16_t _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::my_package::my_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_package::my_message_<ContainerAllocator> const> ConstPtr;

}; // struct my_message_

typedef ::my_package::my_message_<std::allocator<void> > my_message;

typedef boost::shared_ptr< ::my_package::my_message > my_messagePtr;
typedef boost::shared_ptr< ::my_package::my_message const> my_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_package::my_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_package::my_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_package::my_message_<ContainerAllocator1> & lhs, const ::my_package::my_message_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_package::my_message_<ContainerAllocator1> & lhs, const ::my_package::my_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_package::my_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_package::my_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::my_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::my_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::my_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::my_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_package::my_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85729383565f7e059d4a213b3db1317b";
  }

  static const char* value(const ::my_package::my_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85729383565f7e05ULL;
  static const uint64_t static_value2 = 0x9d4a213b3db1317bULL;
};

template<class ContainerAllocator>
struct DataType< ::my_package::my_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_package/my_message";
  }

  static const char* value(const ::my_package::my_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_package::my_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 x\n"
"int16 y\n"
"int16 z\n"
;
  }

  static const char* value(const ::my_package::my_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_package::my_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_package::my_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_package::my_message_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PACKAGE_MESSAGE_MY_MESSAGE_H
